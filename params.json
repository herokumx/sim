{
  "name": "IOT Simulator",
  "tagline": "",
  "body": "# Simulator\r\n\r\nThis is a sample application demonstrating the Xively platform.\r\n\r\n### Installation\r\n\r\nThe simplest and recommended method of installation is through Heroku. Simply click the button below.\r\n\r\n[![Deploy](https://www.herokucdn.com/deploy/button.png)](https://heroku.com/deploy?template=https://github.com/herokumx/demo-iot-simulator)\r\n\r\n### Local Installation\r\n\r\nIf you would like to run the app locally, check your [system requirements](#system-requirements), clone this\r\nrepository, and run the following from the command line:\r\n\r\n```sh\r\n# You only need to run the following two commands once\r\nnpm install\r\nnpm run provision\r\n# This must be run each time you want to work on the project\r\nnpm run dev\r\n```\r\n\r\nNavigate to <http://localhost:5000/> in your browser to access the app. The application will automatically refresh as you make changes to the source code.\r\n\r\n### Heroku Installation\r\n\r\nIf you are making changes to this repo or a fork of it you'll need commit the built client files to deploy it. You can follow this script as an example.\r\n\r\n```sh\r\ngit clone git@github.com:my-github-user/simulator.git\r\ncd simulator\r\ngit checkout -b my-changes\r\n# make your changes\r\nnpm run dev\r\n# test your changes\r\ngit add .\r\ngit commit\r\ngit checkout -b my-changes-heroku\r\nnpm run build\r\n# public is normally ignored in git\r\ngit add public --force\r\ngit commit -m \"Build\"\r\n```\r\n\r\nThen you can push to your heroku instance from a heroku-cli set remote.\r\n\r\n```sh\r\ngit push heroku my-changes-heroku:master --force\r\n```\r\n\r\nOr deploy a from scratch copy by pushing to your fork and deploying with https://heroku.com/deploy.\r\n\r\n```sh\r\ngit push origin my-changes-heroku\r\n# https://heroku.com/deploy?template=https://github.com/my-github-user/simulator/tree/my-changes-heroku\r\n```\r\n\r\n#### Updating Data-Flow Dependencies (habanero)\r\n\r\nSince [data flow](https://www.npmjs.com/package/node-red-habanero) is a seperate application, to obtain updates from that repository, you can run the following commands to force a rebuild,\r\nreplacing `my-changes-heroku` with the branch of the simulator you are using.\r\n\r\n```sh\r\nheroku config:set NODE_MODULES_CACHE=false\r\ngit commit -am 'disable node_modules cache force rebuild' --allow-empty\r\ngit push heroku my-changes-heroku:master --force\r\n```\r\n\r\n### Developer Scripts\r\n\r\nThere are a handful of npm scripts to aid in development.\r\n\r\n- `build` – build the client app to the `public`\r\n- `build:watch` – build the client app to the `public` and watch for changes\r\n- `clean` – delete the `public` folder\r\n- `dev` – run a development version of the app and watch for changes\r\n- `lint` – lint JavaScript files\r\n- `local-provision` – configure the app to run locally\r\n- `start` – start the Node server\r\n- `start:watch` – start the Node server and restart on file changes\r\n- `syncdb` – sync database, create tables\r\n- `test` – run all tests\r\n- `test-client` – run client tests\r\n- `test-client:watch` – run client tests and watch for changes\r\n- `test-server` – run server tests\r\n\r\n### Configuration\r\n\r\n#### Environment Variables\r\n\r\n- XIVELY_IDM_HOST\r\n- XIVELY_TIMESERIES_HOST\r\n- XIVELY_BROKER_HOST\r\n- XIVELY_ACCOUNT_ID\r\n- XIVELY_IDM_EMAIL_ADDRESS\r\n- XIVELY_IDM_PASSWORD\r\n- XIVELY_MQTT_USERNAME\r\n- XIVELY_MQTT_PASSWORD\r\n- HABANERO_EMBEDDED\r\n\r\n### Salesforce Integration\r\n\r\nThis application can be used to demonstrate Xively's integration with Salesforce.\r\nTo try that out, set up your Salesforce account as follows:\r\n\r\n1. Create a Salesforce account\r\n2. Install this Salesforce package:\r\n   https://login.salesforce.com/packaging/installPackage.apexp?p0=04t36000000HRMn\r\n\r\nNow that your Salesforce account is set up, it's time to configure the application.\r\nThis process is different depending on whether you're setting things up locally\r\nor if you'll be running it on Heroku.\r\n\r\n#### Heroku\r\n\r\n1. Log into Heroku\r\n2. Navigate to this application\r\n3. Insert your Salesforce credentials into the dashboard, and save the changes\r\n4. When the application restarts, it will upload a Contact and the devices as Assets\r\nto Salesforce\r\n\r\n#### Local development\r\n\r\n1. Be sure that you've provisioned the app before. If you have, then you will have\r\na `.env` file.\r\n2. Open up `.env` and add three new fields:\r\n  - `SALESFORCE_USER`: your Salesforce username. This is generally an email.\r\n  - `SALESFORCE_PASSWORD`: your Salesforce password\r\n  - `SALESFORCE_TOKEN`: your Salesforce token. To find this, follow\r\n    the guide [here](https://success.salesforce.com/answers?id=90630000000glADAAY)\r\n3. Restart the Node application. It will upload a Contact and the devices as Assets\r\n  to your Salesforce account\r\n\r\n### Branches and Release notes\r\n\r\n#### New development\r\n\r\nAll new development must be done outside of the release workflow branches (`staging`/`beta`/`master`).  Small changes can be done directly in the `development` branch, while feature work should be done in individual feature branches.  Individual feature branches should be reviewed before they are merged back into the main `development` branch.\r\n\r\nPull Requests are not to be merged into `master` without first being confirmed by QA.\r\nAfter your PR is reviewed, merge your PR into the `staging` branch. Then cut a new build release into `staging-build`.\r\n\r\n#### Staging\r\n\r\n[Deploy the staging branch](https://heroku.com/deploy?template=https://github.com/xively/simulator/tree/staging-build)\r\n\r\n(NOTE: You will have to run `npm run build` & add the public folder by force `git add public --force`)\r\n\r\n#### Beta\r\n\r\nThe `beta` branch represents the latest and greatest stable code available for public consumption, with the expectation that it may or may not be production-approved. When a `staging` branch has been QA'd and no regressions/outstanding issues are found, then the `staging` branch can be built directly into the `beta` branch. After you've done that, tag `beta` with the latest version number.\r\n\r\n```shell\r\ngit tag -a v1.1 -m \"write a note about what this version includes\"\r\ngit push origin v1.1\r\n```\r\n\r\n[Deploy the beta branch.](https://heroku.com/deploy?template=https://github.com/xively/simulator/tree/beta)\r\n\r\n#### Master\r\n\r\nThe `master` branch is the latest production-approved code that is the standard for general use.  This will be periodically updated from the `beta` branch by stakeholder request, with all accompanying documentation.  The update is performed by copying the `beta` branch over to `master`, as both are directly built branches.\r\n\r\n#### Release notes\r\n\r\nIf you want to include release notes between each tagged version, you can get a list of commits using this command:\r\n\r\n```shell\r\ngit log v1.0..v1.1\r\n```\r\n\r\nThis will give you all the commits made between those 2 versions.\r\n\r\nTags are like branches, so you can also do that with any branch. For example if you want to see how many commits `staging` is ahead of `master`:\r\n\r\n```shell\r\ngit log master..staging\r\n```\r\n\r\n### System Requirements\r\n\r\n- Heroku &amp; Heroku CLI\r\n  - heroku account with creditcard attached to account\r\n\r\n- Node >4\r\n  - [http://nodejs.org](http://nodejs.org) (All Platforms)\r\n  - `brew install node` via [Homebrew](http://brew.sh/) (OSX)\r\n  - `apt-get/yum install node` (Linux)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}